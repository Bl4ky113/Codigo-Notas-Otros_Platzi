Conceptos:

file: archivo a llamar

commit: id de commit, que se obtiene con git log

ReRe: "Repositorio Remoto"

ReLo: "Repositorio Local"

Dir: "directorio de trabajo local"

//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//

Los comandos m√°s basicos de Git son:

//Comandos para Iniciar y configurar Git

git init: inicia el repositorio

git global: muestra la configuracion disponible del git{
	-l: muestra la configuracion actual del git
}

//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//

//Comandos para enviar y ver el status del Staging y del ReLo

git status: indica el status del repositorio

git add <file>: Agrega el <file> a el Staging{
	<file: .>: Agrega todos los <files> dentro del Dir
}

git commit <flag> "<mensaje>": Enviar el <file> que se agrego a el ReLo{
	<flag: -m>: Envia el <mensaje> a el commit
	<flag: -am>: Agrega el <file> a el Staging !!Envia todos los archivos que se modificaron, y no se puede hacer con archivos que no sea han agregado y enviar el <mensaje> a el commit
	<flag: " " or -a >: Genera un editor de texto basado en VIM, para hacer un mensaje a el commit (Se sale con Esc, Shift y 2 veces 'z')
}

//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//

//Comandos para ver los cambios y Commit's de los archivos o del ReLo

git show <file>: Muestra del <file> los cambios de la version actual y la version anterior{
	<file: " ">: Muestra los cambios los ultimos cambios hechos en el ReLo
}

git log <flag> <file>: Muestra los commit's del <file>{
	<flag: --stat>: Muestra los cambios exactos
	<file: " ">: Muestra los commit's del ReLo
}

git diff <commit_A> <commit_B>: Muestra los cambios del <commit_A> y el <commit_B>

git checkout <commit> <file>: Cambia el <file> al el archivo que se especifica en el <commit>{
	<commit: master>: Cambia a el <file> a la ultima version del master
}

//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//

//Comandos para Eliminar archivos del HEAD, del Dir, del ReLo o del ReRe !!Cuidado, puedes perder tu trabajo con estos comandos (y hasta tu pc)

git reset <flag> <commit>: !! Puede causar muchos problemas en el discoDuro, ReLo, Staging y Git Cambia el <file> a una version anterior, pero eliminando los commits posteriores a el <commit>{
	<flag: --hard>: Elimina toda la informacion que esta en el staging
	<flag: --soft>: Elimina los registros de Git, pero guarda los cambios que esten en Staging
	<flag: HEAD>: Elimina los archivos del staging, para que estos no se envien en al ultimo commit
}

git rm <flag> <file>: !! Puede causar muchos problemas en el Stage; Este comando no se puede usar sin flags{
	<flag: --cached>: Elimina <file> del staging y del proximo commit, pero los mantiene en el discoduro
	<flag: --force>: Elimina <file> del staginn, de Git y del discoduro
}

//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//

//Comandos para interactuar con ReRe's

git clone <urlReRe>: Copia y pega los archivos del Master del <urlReRe> y crea la base de datos de los cambios historicos en el repositorio local.

git push: !!Puede tener varios errores y fallas ; Envia los cambios y los commits a <urlReRe>

git fetch: Copia el <file> del <urlReRe> y lo pega en el ReLo

git merge: Copia el <file> del <urlReRe> y lo pega en el Dir

git pull: Hace la accion de "git fetch" y "git merge"

//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//<*>//

//Comandos de Branches (ramas)

git branch <nombreBranch>: Crea una branch en ReLo y lo nombra como <nombreBranch>

git checkout <nombreBranch>: !!Asegurate de guardar y actualizar tus archivos antes de cambiar de branch; Cambia la branch a <nombreBranch>

git merge <nombreBranch>: Desde la branch donde esta (generalmente master), se junta esta branch y la <nombreBranch>
